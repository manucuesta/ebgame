import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';
import { expect } from 'chai';
import { shallow } from 'enzyme';
import Enzyme from 'enzyme';
import Adapter from 'enzyme-adapter-react-16';
import Header from './components/Header';
import Home from './components/Home';
import VSCPU from './components/VsCPU';
import VSHUMAN from './components/VsHuman';

Enzyme.configure({ adapter: new Adapter() });

// Checking if the app component crashes on mount
it('renders app without crashing', () => {
  const div = document.createElement('div');
  ReactDOM.render(<App />, div);
  ReactDOM.unmountComponentAtNode(div);
});

// Checking if the header component crashes on mount
it('renders header without crashing', () => {
  const div = document.createElement('div');
  ReactDOM.render(<Header />, div);
  ReactDOM.unmountComponentAtNode(div);
});

// Checking if the home component crashes on mount
it('renders home without crashing', () => {
  const div = document.createElement('div');
  ReactDOM.render(<Home />, div);
  ReactDOM.unmountComponentAtNode(div);
});

// Checking if the VSCPU component crashes on mount
it('renders VSCPU without crashing', () => {
  const div = document.createElement('div');
  ReactDOM.render(<VSCPU />, div);
  ReactDOM.unmountComponentAtNode(div);
});

// Checking if the VSHUMAN component crashes on mount
it('renders VSHUMAN without crashing', () => {
  const div = document.createElement('div');
  ReactDOM.render(<VSHUMAN />, div);
  ReactDOM.unmountComponentAtNode(div);
});

// Checks if the home component is loading the information as it should
it('it loads home', () => {
  const wrapper = shallow(<App />);
  const instance = wrapper.instance();
  expect(instance.state.showComponent).to.equal('');
  
  // In the home the number has to be 0 and the message Guess the number as they are the initial parameters
  expect(instance.state.number).to.equal(0);
  expect(instance.state.message).to.equal('Guess the number.');
});


it('it loads vscpu', () => {
  const wrapper = shallow(<App />);
  const instance = wrapper.instance();
  
  // Check if the component changes to render the VSCPU screen
  instance.changeComponent('VSCPU');  
  expect(instance.state.showComponent).to.equal('VSCPU');

  // Check if the number is generated by the machine and it is between 1 and 100
  expect(instance.state.number).to.be.greaterThan(0);
  expect(instance.state.number).to.be.lessThan(101);
});

it('it loads vshuman', () => {
  const wrapper = shallow(<App />);
  const instance = wrapper.instance();
  
  // Check if the component changes to render the VSHUMAN screen
  instance.changeComponent('VSHUMAN');  
  expect(instance.state.showComponent).to.equal('VSHUMAN');

  // Check if the number is generated by the machine and it is between 1 and 100
  expect(instance.state.generatedNumber).to.be.greaterThan(0);
  expect(instance.state.generatedNumber).to.be.lessThan(101);
});

// Check if after changing the initial state when it returns to thehome, the values are reseted.
it('restarts game in home', () => {
  const wrapper = shallow(<App />);
  const instance = wrapper.instance();
  instance.changeComponent('VSCPU');
  expect(instance.state.number).to.be.greaterThan(0);
  instance.changeComponent('');
  expect(instance.state.number).to.equal(0);
  expect(instance.state.minNumber).to.equal(1);
  expect(instance.state.maxNumber).to.equal(100);
  expect(instance.state.message).to.equal('Guess the number.');
  expect(instance.state.generatedNumber).to.equal(0);
});

// Check if the random int that the system generates is between the limits passed
it('random int between limits', () => {
  const wrapper = shallow(<App />);
  const instance = wrapper.instance();
  const random = instance.getRandomInt(15,50);
  expect(random).to.be.greaterThan(14);
  expect(random).to.be.lessThan(51);
});

// Check if the limits are updated when the range changes.
it('limits updated', () => {
  const wrapper = shallow(<App />);
  const instance = wrapper.instance();
  instance.changeRange(15,50);
  expect(instance.state.minNumber).to.be.equal(15);
  expect(instance.state.maxNumber).to.be.equal(50);  
});


// Check if the message is cleared when the function is called
it('message cleared', () => {
  const wrapper = shallow(<App />);
  const instance = wrapper.instance();
  instance.clearMessage();
  expect(instance.state.message).to.be.equal('');
});


// Check if the messages are shown correctly when trying to guess the CPU number
it('is cpu number', () => {
  const wrapper = shallow(<App />);
  const instance = wrapper.instance();
  instance.setCPUNumber();
  const number = instance.state.number;

  // If we pass the generated number -1 it should tell you that the generated number is bigger
  instance.isCPUNumber(number - 1);
  expect(instance.state.message).to.be.equal('The number is bigger.');

  // If we pass the generated number +1 it should tell you that the generated number is smaller
  instance.isCPUNumber(number + 1);
  expect(instance.state.message).to.be.equal('The number is smaller.');

  // If we pass the generated number it should tell you that it is corect
  instance.isCPUNumber(number);
  expect(instance.state.message).to.be.equal('The number is correct.');  
});
